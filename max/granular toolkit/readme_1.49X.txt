Granular Toolkit 1.49X©ÊNathan Wolek, 2000-2007 (except third-party externals listed below)nw@nathanwolek.com**INSTALL**1) Copy the folder 'GranTK_*.**' into you MAX/MSP 'externals' folder located inside the 'Applications:Max/MSP 4.6:Cycling'74' folder.2) Copy the folder 'GranTK_*.** help" into your MAX/MSP 'max-help' folder located inside the 'Applications:Max/MSP 4.6' folder.3) Copy the 'gtk-objectlist.txt' from the extras folder to your "Applications:Max/MSP 4.6:Cycling'74:init" folder.  This will add the Granular Toolkit objects and effects to your new object list.Once these steps are done, you can use the abstractions and externals in this toolkitjust like any other MSP external.  The other files located in the 'extras' folder arepresent for information purposes only and therefore do not need to be placed in anyspecific folder location.**SETTINGS**These abstraction should be used with the following MSP settings for optimalperformance:Overdrive																ON Scheduler at Audio Interrupt								ONThe second of these settings should be engaged automatically via loadbang messagein the abstractions.  The first will require manual setting by the user.**INFO**This software has been through extensive testing and use by myself and others.  However, as is always the case, some things don't get spotted or were never anticipated.  If you have any problems or suggestions, please contact me at the above e-mail address. Any and all feedback will be appreciated.This toolkit was created to allow MAX/MSP users the ability to use severalgranular-based effects and the tools used to create them.  The effects included are myown efforts at making granular based effects for use in several projects.  I have alsodeveloped a set of low-level grain generating externals to both speed processing andallow for more precision in parameter handling.  Once you get the idea of how they canbe used, it is my hope that I have made my efforts open enough so that you will be ableto make your own granular-based effects with them.The gran.* files each achieve a specific type of effect based upon the process ofgranular synthesis.  These effects were developed with three goals in mind: they mustuse a low amount of CPU, be able to facilitate easy addition to larger patches and allowthe end user access to a low enough level in the abstraction that changes can be madeto suit individual needs.  These files will remain abstractions, so that they can be usedlike an external but allow user access at a lower level.  To use one, simply type its namein an object box inside the patch window.The grain.* files are externals.  They handle inividual grain creation in four differentways:  bang, pulse, stream & phase.  The 'grain.bang~' object creates a single grainwhen it receives a bang from the patch.  The 'grain.stream~' object creates grainscontinuously at a specified frequency.  The 'grain.phase~' object is controlled by phasedata such as the output from a 'phasor~' object.  Lastly, 'grain.pulse~' is controlled by apulse input like that from the 'train~' object with each pulse triggering an individual grain.Since I got tired of manually setting the phase for multiple 'phasor~' and 'train~' objects, Ialso created two handy little externals called 'phasor.shift~' and 'train.shift~'.  Theseobjects take a single integer argument which specifies the number of outlets and thenoutputs phase data with evenly-spaced phase positions from those outlets.  In otherwords, 2 outlets will be half of a cycle out-of-phase, 3 outlets will be a third of a cycleout-of-phase and so on. I would love to hear from people that find other uses for them.The 'cpPan~' object is a constant power panning object that I created for panning amono signal across a pair of strereo outlets.  It has nothing to do with granularsynthesis itself, but I used it in a few of my effects so I had to include it.  It could come inhandy for other things as well.  **DISCLAIMER**These files are free for personal and artistic purposes.  The user retains any rights heor she may have to any audio produced with this toolkit.  If you would like to use them forsome other distributed endeavor (such as stand-alone applications and pluggoplug-ins), please contact me to arrange an appropriate agreement about such use.  Ifyou are unclear about this distinction, I will gladly clarify via e-mail communication.The included files are provided as is with no guarantees.  The programmer is notresponsible for any potential problems that may result from their use.ANY USE OF THIS TOOLKIT OR ANY PORTION OF THE TOOLKIT WILL BECONSIDERED AN AGREEMENT TO THE ABOVE TERMS.If you have any questions or feedback about this toolkit, feel free to e-mail me.**EXTERNALS**grain.bang~ grain.stream~ grain.phase~ grain.pulse~phasor.shift~ train.shift~ cpPan~**ABSTRACTIONS**gran.ASstream.file~gran.ASstream.live~gran.pitch.file~ gran.pitch.live~ gran.chord.file~ gran.chord.live~ gran.cloud.file~gran.cloud.live~gran.groove.file~gran.play.file~gran.space2.file~gran.space2.live~ gran.space8.file~ gran.space8.live~HStoMult HStoMult.listrandomRangedbtomultsignalSwitch~**THIRD-PARTY EXTERNALS**The following external objects are included in this distribution with the permission oftheir respective creators:Lbuf											Peter Elsea Lcatch										Peter Elseaunlist											Peter Elsea Label											Peter ElseaCopyright on the above externals remains with the proper authors/organizations.  Theyare included with help files so that they may be easily used in other patches.**CREDITS**The some of the work in this toolkit is the culmination of several projects for which I didprogramming at the request of third parties.  I just wanted to mention those projects andthank the artists who pushed me to develop some of these ideas:Thomas & Beulah					Amnon Wolman Fool's Paradise						Paul HertzThe Portal									Annette Barbier, Gary Kendall & Ian Horswill